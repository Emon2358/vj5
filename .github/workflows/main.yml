name: Niconico Video Glitch and Release (Manual Input)

on:
  workflow_dispatch:
    inputs:
      niconico_video_url:
        description: 'データモッシュしたいニコニコ動画のURL'
        required: true
        default: 'https://www.nicovideo.jp/watch/sm9' # 例としてデフォルトURLを設定
      glitches_count:
        description: 'グリッチの回数 (整数)'
        required: false
        default: '900'
      glitch_strength_bytes:
        description: 'グリッチの強度 (バイト数)'
        required: false
        default: '99999'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install Python dependencies and FFmpeg
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        pip install yt-dlp
        # 追加のPythonライブラリが必要な場合はここにインストールコマンドを追加

    - name: Execute Niconico Download and Datamosh (Inline Python)
      id: run_datamosh
      env:
        NICONICO_VIDEO_URL_INPUT: ${{ github.event.inputs.niconico_video_url }}
        GLITCHES_COUNT_INPUT: ${{ github.event.inputs.glitches_count }}
        GLITCH_STRENGTH_BYTES_INPUT: ${{ github.event.inputs.glitch_strength_bytes }}
      run: |
        python -c "
          import subprocess
          import os
          import random
          import sys
          import re

          def download_niconico_video(url, output_dir='videos', cookies_file_path=None):
              if not os.path.exists(output_dir):
                  os.makedirs(output_dir)

              video_id_match = re.search(r'(sm|nm|so)(\d+)', url)
              if video_id_match:
                  base_filename = video_id_match.group(0)
              else:
                  base_filename = 'niconico_video'

              download_target_path_prefix = os.path.join(output_dir, base_filename)

              print(f'ニコニコ動画をダウンロード中: {url}...')
              cmd = [
                  'yt-dlp',
                  url,
                  '--output', f'{download_target_path_prefix}.%(ext)s',
                  '--format', 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best',
                  '--merge-output-format', 'mp4',
                  '--verbose',
              ]
              if cookies_file_path and os.path.exists(cookies_file_path):
                  cmd.extend(['--cookies', cookies_file_path])
                  print(f'クッキーファイル {cookies_file_path} を使用します。')
              else:
                  print('クッキーファイルは使用しません。')

              try:
                  result = subprocess.run(cmd, check=True, capture_output=True, text=True)
                  
                  downloaded_files = [f for f in os.listdir(output_dir) if f.startswith(base_filename) and (f.endswith('.mp4') or f.endswith('.webm') or f.endswith('.flv') or f.endswith('.mkv'))]
                  
                  if downloaded_files:
                      actual_downloaded_path = os.path.join(output_dir, downloaded_files[0])
                      print(f'ダウンロード完了: {actual_downloaded_path}')
                      return actual_downloaded_path
                  else:
                      print(f'エラー: yt-dlpは完了しましたが、ファイルが見つかりません: {download_target_path_prefix}.*')
                      print('yt-dlpの完全な出力:\n', result.stdout)
                      print('yt-dlpのエラー出力:\n', result.stderr)
                      return None

              except subprocess.CalledProcessError as e:
                  print(f'yt-dlpエラー: {e.stderr}')
                  return None
              except Exception as e:
                  print(f'ダウンロード中に予期せぬエラーが発生しました: {e}')
                  return None

          def datamosh_video(input_video_path, output_video_path, glitches_to_apply=5, glitch_strength=5000):
              if not os.path.exists(input_video_path):
                  print(f'エラー: 入力ファイルが見つかりません - {input_video_path}')
                  sys.exit(1)

              temp_inter_video = 'temp_inter.avi'
              temp_glitched_video = 'temp_glitched.avi'

              print('ステップ1: Iフレーム間隔を広く設定し、AVIに変換中...')
              try:
                  subprocess.run([
                      'ffmpeg', '-i', input_video_path,
                      '-vf', 'setpts=PTS/1.0',
                      '-q:v', '0',
                      '-g', '99999',
                      '-f', 'avi', temp_inter_video
                  ], check=True, capture_output=True, text=True)
                  print('一時AVIファイル作成完了。')
              except subprocess.CalledProcessError as e:
                  print(f'FFmpegエラー (ステップ1): {e.stderr}')
                  if os.path.exists(temp_inter_video):
                      os.remove(temp_inter_video)
                  sys.exit(1)

              print(f'ステップ2: バイナリ破損を {glitches_to_apply} 回適用中...')
              try:
                  with open(temp_inter_video, 'rb') as f:
                      video_data = bytearray(f.read())

                  video_size = len(video_data)
                  print(f'ビデオデータサイズ: {video_size} バイト')

                  min_offset = int(video_size * 0.05)
                  if min_offset > video_size - glitch_strength - 1:
                      min_offset = 0

                  for _ in range(glitches_to_apply):
                      start_offset = random.randint(min_offset, video_size - glitch_strength - 1)
                      if start_offset < 0:
                          start_offset = 0
                      end_offset = start_offset + glitch_strength

                      for i in range(start_offset, min(end_offset, video_size)):
                          video_data[i] = random.randint(0, 255)

                      print(f'  破損適用: オフセット {start_offset} から {end_offset} ({glitch_strength} バイト)')

                  with open(temp_glitched_video, 'wb') as f:
                      f.write(video_data)
                  print('バイナリ破損適用完了。')

              except Exception as e:
                  print(f'ファイル処理エラー (ステップ2): {e}')
                  if os.path.exists(temp_inter_video):
                      os.remove(temp_inter_video)
                  if os.path.exists(temp_glitched_video):
                      os.remove(temp_glitched_video)
                  sys.exit(1)

              print('ステップ3: 破損したAVIファイルを最終出力形式に変換中...')
              try:
                  subprocess.run([
                      'ffmpeg', '-i', temp_glitched_video,
                      '-c:v', 'libx264',
                      '-preset', 'medium',
                      '-crf', '23',
                      '-y',
                      output_video_path
                  ], check=True, capture_output=True, text=True)
                  print(f'データモッシュ完了: {output_video_path}')
              except subprocess.CalledProcessError as e:
                  print(f'FFmpegエラー (ステップ3): {e.stderr}')
                  sys.exit(1)
              finally:
                  if os.path.exists(temp_inter_video):
                      os.remove(temp_inter_video)
                  if os.path.exists(temp_glitched_video):
                      os.remove(temp_glitched_video)
                  print('一時ファイルを削除しました。')

          # メイン処理 (GitHub Actionsからの実行用)
          input_url = os.environ.get('NICONICO_VIDEO_URL_INPUT')
          glitches = int(os.environ.get('GLITCHES_COUNT_INPUT', '900'))
          strength = int(os.environ.get('GLITCH_STRENGTH_BYTES_INPUT', '99999'))

          output_filename = 'glitched_video.mp4'
          cookies_file = None

          if not input_url:
              print('エラー: URLが入力されていません。')
              sys.exit(1)

          download_dir = 'downloaded_videos_temp'
          downloaded_path = download_niconico_video(input_url, download_dir, cookies_file_path=cookies_file)

          if downloaded_path:
              datamosh_video(downloaded_path, output_filename, glitches_to_apply=glitches, glitch_strength=strength)
              
              if os.path.exists(downloaded_path):
                  os.remove(downloaded_path)
                  print(f'一時ダウンロードファイル {downloaded_path} を削除しました。')
              
              if os.path.exists(download_dir) and not os.listdir(download_dir):
                  os.rmdir(download_dir)
                  print(f'空のダウンロードディレクトリ {download_dir} を削除しました。')
          else:
              print('動画のダウンロードに失敗しました。データモッシュをスキップします。')
              sys.exit(1)

          print(f'glitched_output_file={output_filename}')
        " >> $GITHUB_OUTPUT # ここで出力


    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Glitched Video to Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ steps.run_datamosh.outputs.glitched_output_file }}
        asset_name: glitched_video-${{ github.ref_name }}.mp4
        asset_content_type: video/mp4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
